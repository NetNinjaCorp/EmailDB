name: EmailDB Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['8.0.x', '9.0.x']
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Display .NET version
      run: dotnet --version

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run All Tests
      run: dotnet test --no-build --configuration Release --verbosity normal --logger "console;verbosity=detailed" --logger "trx;LogFileName=test-results.trx"

    - name: Run Phase 1 Tests
      run: dotnet test --no-build --configuration Release --filter "FullyQualifiedName~Phase1" --logger "console;verbosity=normal"
      continue-on-error: true

    - name: Run Phase 2 Tests  
      run: dotnet test --no-build --configuration Release --filter "FullyQualifiedName~Phase2" --logger "console;verbosity=normal"
      continue-on-error: true

    - name: Run Phase 3 Tests
      run: dotnet test --no-build --configuration Release --filter "FullyQualifiedName~Phase3" --logger "console;verbosity=normal"
      continue-on-error: true

    - name: Run Phase 4 Tests
      run: dotnet test --no-build --configuration Release --filter "FullyQualifiedName~Phase4" --logger "console;verbosity=normal"
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-dotnet${{ matrix.dotnet-version }}
        path: |
          **/*.trx
          **/TestResults/

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results - ${{ matrix.os }} - .NET ${{ matrix.dotnet-version }}
        path: '**/*.trx'
        reporter: dotnet-trx
        fail-on-error: false

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests with coverage
      run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5
      with:
        reports: coverage/**/coverage.cobertura.xml
        targetdir: coverage-report
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummary'

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-report/

    - name: Display coverage summary
      run: cat coverage-report/Summary.md >> $GITHUB_STEP_SUMMARY
      if: always()

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run E2E Tests
      run: dotnet test --no-build --configuration Release --filter "FullyQualifiedName~E2E|FullyQualifiedName~Integration" --logger "console;verbosity=normal"
      continue-on-error: true

    - name: Run Performance Tests
      run: dotnet test --no-build --configuration Release --filter "FullyQualifiedName~Performance" --logger "console;verbosity=normal"
      timeout-minutes: 30
      continue-on-error: true

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run Benchmarks
      run: |
        dotnet test --no-build --configuration Release --filter "FullyQualifiedName~Benchmark" --logger "console;verbosity=normal" || true
      timeout-minutes: 60
      continue-on-error: true

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, coverage, integration-tests]
    if: always()
    
    steps:
    - name: Create summary
      run: |
        echo "# EmailDB Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Run Status" >> $GITHUB_STEP_SUMMARY
        echo "- Main Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Phase Status" >> $GITHUB_STEP_SUMMARY
        echo "- Phase 1: Block Format & Payload Encoding" >> $GITHUB_STEP_SUMMARY
        echo "- Phase 2: Manager Layer & Transactions" >> $GITHUB_STEP_SUMMARY
        echo "- Phase 3: Indexing & Search" >> $GITHUB_STEP_SUMMARY
        echo "- Phase 4: Maintenance & Cleanup" >> $GITHUB_STEP_SUMMARY