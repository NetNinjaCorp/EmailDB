using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EmailDB.Format.FileManagement;
using EmailDB.Format.Models;
using EmailDB.Format.Models.BlockTypes;
using EmailDB.UnitTests.Helpers;
using Xunit;
using Xunit.Abstractions;

namespace EmailDB.UnitTests;

/// <summary>
/// Tests system resilience and recovery from various corruption scenarios.
/// </summary>
public class CorruptionRecoveryTest : IDisposable
{
    private readonly ITestOutputHelper _output;
    private readonly string _testDir;
    private readonly Random _random = new(42);

    public CorruptionRecoveryTest(ITestOutputHelper output)
    {
        _output = output;
        _testDir = Path.Combine(Path.GetTempPath(), $"CorruptionTest_{Guid.NewGuid():N}");
        Directory.CreateDirectory(_testDir);
    }

    [Fact]
    public async Task Test_Corrupted_Block_Recovery()
    {
        _output.WriteLine("üîß CORRUPTION RECOVERY TEST");
        _output.WriteLine("===========================\n");
        
        var path = Path.Combine(_testDir, "corrupt_blocks.db");
        
        // Phase 1: Write good data
        _output.WriteLine("üìù PHASE 1: WRITE GOOD DATA");
        _output.WriteLine("===========================");
        
        var goodBlocks = new List<(long id, string data)>();
        
        using (var manager = new RawBlockManager(path, createIfNotExists: true))
        {
            for (int i = 0; i < 100; i++)
            {
                var data = $"Good data block {i}: " + new string('x', 1000);
                var block = BlockTestHelpers.CreateSegmentBlock(i + 1000, data);
                
                var result = await manager.WriteBlockAsync(block);
                Assert.True(result.IsSuccess);
                
                goodBlocks.Add((block.BlockId, data));
            }
        }
        
        _output.WriteLine($"  Blocks written: {goodBlocks.Count}");
        _output.WriteLine($"  File size: {FormatBytes(new FileInfo(path).Length)}");
        
        // Phase 2: Corrupt the file
        _output.WriteLine("\nüí• PHASE 2: INTRODUCE CORRUPTION");
        _output.WriteLine("================================");
        
        var fileBytes = await File.ReadAllBytesAsync(path);
        var originalSize = fileBytes.Length;
        
        // Corrupt random bytes in the middle of the file
        var corruptionStart = fileBytes.Length / 3;
        var corruptionSize = Math.Min(1000, fileBytes.Length / 10);
        
        for (int i = 0; i < corruptionSize; i++)
        {
            fileBytes[corruptionStart + i] = (byte)_random.Next(256);
        }
        
        await File.WriteAllBytesAsync(path, fileBytes);
        
        _output.WriteLine($"  Corrupted {corruptionSize} bytes at offset {corruptionStart}");
        
        // Phase 3: Attempt to read with corrupted data
        _output.WriteLine("\nüìñ PHASE 3: READ WITH CORRUPTION");
        _output.WriteLine("================================");
        
        var readableBlocks = 0;
        var corruptedBlocks = 0;
        var recoveredData = new List<(long id, string data)>();
        
        using (var manager = new RawBlockManager(path, createIfNotExists: false))
        {
            foreach (var (blockId, expectedData) in goodBlocks)
            {
                try
                {
                    var result = await manager.ReadBlockAsync(blockId);
                    if (result.IsSuccess && result.Value != null)
                    {
                        var content = result.Value.Content as SegmentContent;
                        if (content != null)
                        {
                            var data = Encoding.UTF8.GetString(content.SegmentData);
                            recoveredData.Add((blockId, data));
                            readableBlocks++;
                        }
                    }
                    else
                    {
                        corruptedBlocks++;
                    }
                }
                catch
                {
                    corruptedBlocks++;
                }
            }
        }
        
        _output.WriteLine($"  Readable blocks: {readableBlocks}/{goodBlocks.Count}");
        _output.WriteLine($"  Corrupted blocks: {corruptedBlocks}");
        _output.WriteLine($"  Recovery rate: {readableBlocks * 100.0 / goodBlocks.Count:F1}%");
        
        // Phase 4: Rebuild index and recover
        _output.WriteLine("\nüî® PHASE 4: REBUILD AND RECOVER");
        _output.WriteLine("================================");
        
        // Create a recovery file
        var recoveryPath = Path.Combine(_testDir, "recovered.db");
        
        using (var recoveryManager = new RawBlockManager(recoveryPath, createIfNotExists: true))
        {
            foreach (var (id, data) in recoveredData)
            {
                var content = new SegmentContent
                {
                    SegmentData = Encoding.UTF8.GetBytes(data)
                };
                
                var block = new Block
                {
                    BlockId = id,
                    Type = BlockType.Segment,
                    Encoding = PayloadEncoding.RawBytes,
                    Timestamp = DateTime.UtcNow.Ticks,
                    Content = content
                };
                
                await recoveryManager.WriteBlockAsync(block);
            }
        }
        
        _output.WriteLine($"  Recovered blocks: {recoveredData.Count}");
        _output.WriteLine($"  Recovery file size: {FormatBytes(new FileInfo(recoveryPath).Length)}");
        
        Assert.True(readableBlocks > goodBlocks.Count * 0.5, "Recovery rate too low");
    }

    [Fact]
    public async Task Test_Index_Corruption_Recovery()
    {
        _output.WriteLine("\nüóÇÔ∏è INDEX CORRUPTION RECOVERY TEST");
        _output.WriteLine("=================================");
        
        var dataPath = Path.Combine(_testDir, "index_corrupt.data");
        var indexPath = Path.Combine(_testDir, "indexes");
        
        // Phase 1: Create data with indexes
        using (var store = new HybridEmailStore(dataPath, indexPath))
        {
            for (int i = 0; i < 100; i++)
            {
                await store.StoreEmailAsync(
                    $"msg-{i}@test.com",
                    $"folder-{i % 5}",
                    Encoding.UTF8.GetBytes($"Email content {i}"),
                    subject: $"Test email {i}",
                    body: $"This is test email number {i}"
                );
            }
            
            await store.FlushAsync();
        }
        
        _output.WriteLine("  Initial data written");
        
        // Phase 2: Corrupt index files
        var indexFiles = Directory.GetFiles(indexPath, "*", SearchOption.AllDirectories)
            .Where(f => !f.Contains("lock")).ToList();
        
        _output.WriteLine($"  Found {indexFiles.Count} index files");
        
        // Corrupt a random index file
        if (indexFiles.Any())
        {
            var fileToCorrupt = indexFiles[_random.Next(indexFiles.Count)];
            var bytes = await File.ReadAllBytesAsync(fileToCorrupt);
            
            // Corrupt some bytes
            for (int i = 0; i < Math.Min(100, bytes.Length); i++)
            {
                bytes[_random.Next(bytes.Length)] = (byte)_random.Next(256);
            }
            
            await File.WriteAllBytesAsync(fileToCorrupt, bytes);
            _output.WriteLine($"  Corrupted: {Path.GetFileName(fileToCorrupt)}");
        }
        
        // Phase 3: Try to use corrupted indexes
        _output.WriteLine("\n  Attempting to use corrupted indexes...");
        
        var errors = 0;
        var successes = 0;
        
        try
        {
            using (var store = new HybridEmailStore(dataPath, indexPath))
            {
                // Try various operations
                try
                {
                    var folders = new[] { "folder-0", "folder-1", "folder-2" };
                    foreach (var folder in folders)
                    {
                        var emails = store.ListFolder(folder).ToList();
                        successes++;
                    }
                }
                catch { errors++; }
                
                try
                {
                    var searchResults = store.SearchFullText("email").ToList();
                    successes++;
                }
                catch { errors++; }
                
                try
                {
                    for (int i = 0; i < 10; i++)
                    {
                        var (data, meta) = await store.GetEmailByMessageIdAsync($"msg-{i}@test.com");
                        if (data != null) successes++;
                    }
                }
                catch { errors++; }
            }
        }
        catch (Exception ex)
        {
            _output.WriteLine($"  Store initialization failed: {ex.GetType().Name}");
            errors++;
        }
        
        _output.WriteLine($"  Successful operations: {successes}");
        _output.WriteLine($"  Failed operations: {errors}");
        
        // Phase 4: Rebuild indexes
        _output.WriteLine("\n  Rebuilding indexes...");
        
        // Delete corrupted indexes
        if (Directory.Exists(indexPath))
        {
            Directory.Delete(indexPath, recursive: true);
        }
        
        // Rebuild by re-reading data
        using (var store = new HybridEmailStore(dataPath, indexPath))
        {
            // The store should rebuild indexes from the data file
            var stats = store.GetStats();
            _output.WriteLine($"  Rebuilt stats:");
            _output.WriteLine($"    Emails: {stats.EmailCount}");
            _output.WriteLine($"    Folders: {stats.FolderCount}");
            
            // Note: Full rebuild would require re-indexing from raw data
            // This is a simplified test showing the concept
        }
    }

    [Fact]
    public async Task Test_Partial_Write_Recovery()
    {
        _output.WriteLine("\n‚úçÔ∏è PARTIAL WRITE RECOVERY TEST");
        _output.WriteLine("==============================");
        
        var path = Path.Combine(_testDir, "partial_write.db");
        
        // Simulate partial writes by truncating file
        using (var manager = new RawBlockManager(path, createIfNotExists: true))
        {
            // Write some complete blocks
            for (int i = 0; i < 10; i++)
            {
                var block = new Block
                {
                    BlockId = i + 2000,
                    Type = BlockType.Segment,
                    Encoding = PayloadEncoding.RawBytes,
                    Content = new SegmentContent 
                    { 
                        SegmentData = Encoding.UTF8.GetBytes($"Complete block {i}")
                    }
                };
                
                await manager.WriteBlockAsync(block);
            }
        }
        
        var originalSize = new FileInfo(path).Length;
        
        // Truncate file to simulate incomplete write
        using (var fs = new FileStream(path, FileMode.Open))
        {
            fs.SetLength(originalSize - 50); // Remove last 50 bytes
        }
        
        _output.WriteLine($"  Original size: {originalSize} bytes");
        _output.WriteLine($"  Truncated to: {originalSize - 50} bytes");
        
        // Try to read with truncated file
        var readableCount = 0;
        using (var manager = new RawBlockManager(path, createIfNotExists: false))
        {
            for (int i = 0; i < 10; i++)
            {
                try
                {
                    var result = await manager.ReadBlockAsync(i + 2000);
                    if (result.IsSuccess) readableCount++;
                }
                catch { }
            }
        }
        
        _output.WriteLine($"  Readable blocks after truncation: {readableCount}/10");
        Assert.True(readableCount >= 8, "Too many blocks lost to truncation");
    }

    [Fact]
    public async Task Test_Concurrent_Crash_Recovery()
    {
        _output.WriteLine("\nüí• CONCURRENT CRASH RECOVERY TEST");
        _output.WriteLine("=================================");
        
        var dataPath = Path.Combine(_testDir, "crash_test.data");
        var indexPath = Path.Combine(_testDir, "crash_indexes");
        
        // Simulate writes that might be interrupted
        var writeTask = Task.Run(async () =>
        {
            using var store = new HybridEmailStore(dataPath, indexPath);
            
            for (int i = 0; i < 1000; i++)
            {
                try
                {
                    await store.StoreEmailAsync(
                        $"crash-{i}@test.com",
                        "inbox",
                        Encoding.UTF8.GetBytes($"Email {i} content"),
                        subject: $"Crash test {i}"
                    );
                    
                    // Simulate random "crashes"
                    if (i == 500)
                    {
                        throw new Exception("Simulated crash!");
                    }
                }
                catch
                {
                    _output.WriteLine($"  Simulated crash at email {i}");
                    break;
                }
            }
        });
        
        try
        {
            await writeTask;
        }
        catch { }
        
        // Try to recover and continue
        _output.WriteLine("\n  Attempting recovery...");
        
        using (var store = new HybridEmailStore(dataPath, indexPath))
        {
            var stats = store.GetStats();
            _output.WriteLine($"  Recovered state:");
            _output.WriteLine($"    Emails found: {stats.EmailCount}");
            
            // Continue writing
            var continueCount = 0;
            for (int i = 600; i < 700; i++)
            {
                try
                {
                    await store.StoreEmailAsync(
                        $"recovery-{i}@test.com",
                        "recovered",
                        Encoding.UTF8.GetBytes($"Recovered email {i}"),
                        subject: $"Recovery test {i}"
                    );
                    continueCount++;
                }
                catch { }
            }
            
            _output.WriteLine($"    Additional emails written: {continueCount}");
            
            var finalStats = store.GetStats();
            _output.WriteLine($"  Final email count: {finalStats.EmailCount}");
            
            Assert.True(finalStats.EmailCount > 0, "No emails recovered");
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:F2} {sizes[order]}";
    }

    public void Dispose()
    {
        try
        {
            Directory.Delete(_testDir, recursive: true);
        }
        catch { }
    }
}