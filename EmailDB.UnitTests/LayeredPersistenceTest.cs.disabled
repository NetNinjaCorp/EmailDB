using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EmailDB.Format;
using EmailDB.Format.FileManagement;
using EmailDB.Format.Models;
using EmailDB.Format.Models.BlockTypes;
using EmailDB.Format.ZoneTree;
using Tenray.ZoneTree;
using Xunit;
using Xunit.Abstractions;

namespace EmailDB.UnitTests;

/// <summary>
/// Layered persistence tests to verify each component independently
/// </summary>
public class LayeredPersistenceTest : IDisposable
{
    private readonly ITestOutputHelper _output;
    private readonly string _testDbPath;

    public LayeredPersistenceTest(ITestOutputHelper output)
    {
        _output = output;
        _testDbPath = Path.Combine(Path.GetTempPath(), $"layered_test_{Guid.NewGuid()}");
    }

    [Fact]
    public async Task Layer1_RawBlockManager_Persistence()
    {
        _output.WriteLine("=== Layer 1: Testing RawBlockManager Persistence ===\n");
        
        var testBlocks = new Dictionary<int, string>();
        
        // Step 1: Write blocks
        _output.WriteLine("Step 1: Writing test blocks...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            // Write different types of blocks
            var blocks = new[]
            {
                new Block 
                { 
                    BlockId = 1001, 
                    Type = BlockType.Email, 
                    Payload = Encoding.UTF8.GetBytes("Email content 1"),
                    Version = 1,
                    Flags = 0,
                    Encoding = PayloadEncoding.RawBytes,
                    Timestamp = DateTime.UtcNow.Ticks
                },
                new Block 
                { 
                    BlockId = 1002, 
                    Type = BlockType.Metadata, 
                    Payload = Encoding.UTF8.GetBytes("Metadata content"),
                    Version = 1,
                    Flags = 0,
                    Encoding = PayloadEncoding.Json,
                    Timestamp = DateTime.UtcNow.Ticks
                },
                new Block 
                { 
                    BlockId = 1003, 
                    Type = BlockType.Folder, 
                    Payload = Encoding.UTF8.GetBytes("Folder content"),
                    Version = 1,
                    Flags = 0,
                    Encoding = PayloadEncoding.RawBytes,
                    Timestamp = DateTime.UtcNow.Ticks
                },
                new Block 
                { 
                    BlockId = 1004, 
                    Type = BlockType.ZoneTreeSegment_KV, 
                    Payload = Encoding.UTF8.GetBytes("ZoneTree segment data"),
                    Version = 1,
                    Flags = 0,
                    Encoding = PayloadEncoding.RawBytes,
                    Timestamp = DateTime.UtcNow.Ticks
                }
            };
            
            foreach (var block in blocks)
            {
                var result = await blockManager.WriteBlockAsync(block);
                Assert.True(result.IsSuccess, $"Failed to write block {block.BlockId}: {result.ErrorMessage}");
                testBlocks[block.BlockId] = Encoding.UTF8.GetString(block.Payload);
                _output.WriteLine($"  ✓ Wrote block {block.BlockId} (Type: {block.Type}, Size: {block.Payload.Length} bytes)");
            }
            
            // Verify blocks are accessible immediately
            foreach (var blockId in testBlocks.Keys)
            {
                var readResult = await blockManager.ReadBlockAsync(blockId);
                Assert.True(readResult.IsSuccess);
                Assert.Equal(testBlocks[blockId], Encoding.UTF8.GetString(readResult.Value.Payload));
            }
            _output.WriteLine($"\n  ✓ Verified all {blocks.Length} blocks are accessible");
        }
        
        // Step 2: Reopen and verify persistence
        _output.WriteLine("\nStep 2: Reopening database to verify block persistence...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            var locations = blockManager.GetBlockLocations();
            _output.WriteLine($"  Found {locations.Count} blocks in storage");
            
            foreach (var (blockId, content) in testBlocks)
            {
                var readResult = await blockManager.ReadBlockAsync(blockId);
                if (readResult.IsSuccess)
                {
                    var actualContent = Encoding.UTF8.GetString(readResult.Value.Payload);
                    Assert.Equal(content, actualContent);
                    _output.WriteLine($"  ✓ Block {blockId}: Persisted correctly");
                }
                else
                {
                    _output.WriteLine($"  ✗ Block {blockId}: NOT FOUND - {readResult.ErrorMessage}");
                    Assert.Fail($"Block {blockId} was not persisted");
                }
            }
        }
        
        _output.WriteLine("\n✅ Layer 1 PASSED: RawBlockManager persists blocks correctly");
    }

    [Fact]
    public async Task Layer2_EmailStorage_Persistence()
    {
        _output.WriteLine("=== Layer 2: Testing Email Storage Persistence ===\n");
        
        var testEmails = new Dictionary<string, string>();
        
        // Step 1: Store emails using EmailManager
        _output.WriteLine("Step 1: Storing emails through EmailManager...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            var emailManager = new EmailManager(blockManager);
            
            // Create test emails
            for (int i = 1; i <= 3; i++)
            {
                var emailContent = new EnhancedEmailContent
                {
                    Subject = $"Test Email {i}",
                    From = $"sender{i}@test.com",
                    To = $"recipient{i}@test.com",
                    TextContent = $"This is test email number {i}",
                    RawEmailContent = Encoding.UTF8.GetBytes($"Raw content for email {i}")
                };
                
                var emailId = $"email_{i}";
                var result = await emailManager.StoreEmailAsync(emailId, emailContent);
                Assert.True(result.IsSuccess);
                
                testEmails[emailId] = emailContent.Subject;
                _output.WriteLine($"  ✓ Stored email: {emailId} - {emailContent.Subject}");
            }
        }
        
        // Step 2: Reopen and verify email persistence
        _output.WriteLine("\nStep 2: Reopening to verify email persistence...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            var emailManager = new EmailManager(blockManager);
            
            foreach (var (emailId, subject) in testEmails)
            {
                var result = await emailManager.GetEmailAsync(emailId);
                if (result.IsSuccess)
                {
                    Assert.Equal(subject, result.Value.Subject);
                    _output.WriteLine($"  ✓ Email {emailId}: Retrieved successfully");
                }
                else
                {
                    _output.WriteLine($"  ✗ Email {emailId}: NOT FOUND");
                    Assert.Fail($"Email {emailId} was not persisted");
                }
            }
        }
        
        _output.WriteLine("\n✅ Layer 2 PASSED: Email storage persists correctly");
    }

    [Fact]
    public async Task Layer3_MetadataAndFolders_Persistence()
    {
        _output.WriteLine("=== Layer 3: Testing Metadata and Folder Persistence ===\n");
        
        var testMetadata = new Dictionary<string, string>();
        var testFolders = new Dictionary<string, List<string>>();
        
        // Step 1: Store metadata and folders
        _output.WriteLine("Step 1: Storing metadata and folder information...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            var metadataManager = new MetadataManager(blockManager);
            var folderManager = new FolderManager(blockManager);
            
            // Store metadata
            var metadata = new[]
            {
                ("db_version", "1.0.0"),
                ("last_updated", DateTime.UtcNow.ToString("O")),
                ("email_count", "100"),
                ("index_version", "2")
            };
            
            foreach (var (key, value) in metadata)
            {
                var result = await metadataManager.SetMetadataAsync(key, value);
                Assert.True(result.IsSuccess);
                testMetadata[key] = value;
                _output.WriteLine($"  ✓ Stored metadata: {key} = {value}");
            }
            
            // Store folder structure
            var folders = new[]
            {
                ("inbox", new[] { "email1", "email2", "email3" }),
                ("sent", new[] { "email4", "email5" }),
                ("important", new[] { "email1", "email5" })
            };
            
            foreach (var (folderName, emails) in folders)
            {
                var result = await folderManager.CreateFolderAsync(folderName);
                Assert.True(result.IsSuccess);
                
                foreach (var emailId in emails)
                {
                    var addResult = await folderManager.AddEmailToFolderAsync(folderName, emailId);
                    Assert.True(addResult.IsSuccess);
                }
                
                testFolders[folderName] = emails.ToList();
                _output.WriteLine($"  ✓ Created folder: {folderName} with {emails.Length} emails");
            }
        }
        
        // Step 2: Reopen and verify persistence
        _output.WriteLine("\nStep 2: Reopening to verify metadata and folder persistence...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            var metadataManager = new MetadataManager(blockManager);
            var folderManager = new FolderManager(blockManager);
            
            // Verify metadata
            _output.WriteLine("\n  Verifying metadata:");
            foreach (var (key, expectedValue) in testMetadata)
            {
                var result = await metadataManager.GetMetadataAsync(key);
                if (result.IsSuccess)
                {
                    Assert.Equal(expectedValue, result.Value);
                    _output.WriteLine($"    ✓ {key}: {result.Value}");
                }
                else
                {
                    _output.WriteLine($"    ✗ {key}: NOT FOUND");
                    Assert.Fail($"Metadata {key} was not persisted");
                }
            }
            
            // Verify folders
            _output.WriteLine("\n  Verifying folders:");
            foreach (var (folderName, expectedEmails) in testFolders)
            {
                var result = await folderManager.GetFolderEmailsAsync(folderName);
                if (result.IsSuccess)
                {
                    var actualEmails = result.Value.ToList();
                    Assert.Equal(expectedEmails.Count, actualEmails.Count);
                    foreach (var email in expectedEmails)
                    {
                        Assert.Contains(email, actualEmails);
                    }
                    _output.WriteLine($"    ✓ {folderName}: Contains {actualEmails.Count} emails");
                }
                else
                {
                    _output.WriteLine($"    ✗ {folderName}: NOT FOUND");
                    Assert.Fail($"Folder {folderName} was not persisted");
                }
            }
        }
        
        _output.WriteLine("\n✅ Layer 3 PASSED: Metadata and folders persist correctly");
    }

    [Fact]
    public async Task Layer4_ZoneTreeBasic_Persistence()
    {
        _output.WriteLine("=== Layer 4: Testing Basic ZoneTree Persistence ===\n");
        
        var testData = new Dictionary<string, string>
        {
            { "key1", "value1" },
            { "key2", "value2" },
            { "key3", "value3" },
            { "test_key", "test_value" },
            { "metadata_key", "metadata_value" }
        };
        
        // Step 1: Create ZoneTree and add data
        _output.WriteLine("Step 1: Creating ZoneTree and storing data...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            var factory = new EmailDBZoneTreeFactory<string, string>(blockManager);
            factory.CreateZoneTree("test");
            
            using (var tree = factory.OpenOrCreate())
            {
                foreach (var (key, value) in testData)
                {
                    tree.Upsert(key, value);
                    _output.WriteLine($"  ✓ Stored: {key} = {value}");
                }
                
                // Force maintenance operations
                _output.WriteLine("\n  Forcing maintenance operations:");
                tree.Maintenance.MoveMutableSegmentForward();
                _output.WriteLine("    ✓ Moved mutable segment forward");
                
                var mergeThread = tree.Maintenance.StartMergeOperation();
                mergeThread?.Join();
                _output.WriteLine("    ✓ Completed merge operation");
                
                tree.Maintenance.SaveMetaData();
                _output.WriteLine("    ✓ Saved metadata");
            }
        }
        
        // List all blocks created
        _output.WriteLine("\nStep 2: Checking what blocks were created...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            var locations = blockManager.GetBlockLocations();
            _output.WriteLine($"  Total blocks: {locations.Count}");
            
            foreach (var (blockId, location) in locations.OrderBy(x => x.Value.Position))
            {
                var readResult = await blockManager.ReadBlockAsync(blockId);
                if (readResult.IsSuccess)
                {
                    var block = readResult.Value;
                    _output.WriteLine($"    Block {blockId}: Type={block.Type}, Size={block.Payload.Length}, Encoding={block.Encoding}");
                }
            }
        }
        
        // Step 3: Reopen and verify persistence
        _output.WriteLine("\nStep 3: Reopening ZoneTree to verify persistence...");
        using (var blockManager = new RawBlockManager(_testDbPath))
        {
            var factory = new EmailDBZoneTreeFactory<string, string>(blockManager);
            factory.CreateZoneTree("test");
            
            using (var tree = factory.OpenOrCreate())
            {
                var foundCount = 0;
                var notFoundKeys = new List<string>();
                
                foreach (var (key, expectedValue) in testData)
                {
                    if (tree.TryGet(key, out var actualValue))
                    {
                        Assert.Equal(expectedValue, actualValue);
                        foundCount++;
                        _output.WriteLine($"  ✓ Found: {key} = {actualValue}");
                    }
                    else
                    {
                        notFoundKeys.Add(key);
                        _output.WriteLine($"  ✗ NOT FOUND: {key}");
                    }
                }
                
                if (notFoundKeys.Any())
                {
                    _output.WriteLine($"\n❌ Layer 4 FAILED: {notFoundKeys.Count} keys were not persisted");
                    Assert.Fail($"Keys not persisted: {string.Join(", ", notFoundKeys)}");
                }
                else
                {
                    _output.WriteLine($"\n✅ Layer 4 PASSED: All {foundCount} ZoneTree entries persisted correctly");
                }
            }
        }
    }

    [Fact]
    public async Task Layer5_FullIntegration_Persistence()
    {
        _output.WriteLine("=== Layer 5: Full Integration Test ===\n");
        
        // This test uses the full EmailDatabase API
        _output.WriteLine("Step 1: Creating EmailDatabase and importing emails...");
        
        var emailIds = new List<EmailHashedID>();
        var emailSubjects = new Dictionary<string, string>();
        
        using (var db = new EmailDatabase(_testDbPath))
        {
            // Import test emails
            for (int i = 1; i <= 3; i++)
            {
                var email = $@"From: sender{i}@test.com
To: recipient{i}@test.com
Subject: Integration Test Email {i}
Date: Mon, 1 Jan 2024 12:00:00 +0000
Message-ID: <test{i}@example.com>

This is integration test email number {i}.";
                
                var emailId = await db.ImportEMLAsync(email);
                emailIds.Add(emailId);
                emailSubjects[emailId.ToString()] = $"Integration Test Email {i}";
                _output.WriteLine($"  ✓ Imported email {i}: {emailId}");
            }
            
            // Verify immediate access
            var allIds = await db.GetAllEmailIDsAsync();
            Assert.Equal(3, allIds.Count);
            _output.WriteLine($"\n  ✓ Verified {allIds.Count} emails are accessible");
        }
        
        // Step 2: Reopen and verify
        _output.WriteLine("\nStep 2: Reopening database to verify full persistence...");
        using (var db = new EmailDatabase(_testDbPath))
        {
            var allIds = await db.GetAllEmailIDsAsync();
            _output.WriteLine($"  Found {allIds.Count} emails (expected 3)");
            
            if (allIds.Count == 0)
            {
                _output.WriteLine("\n❌ Layer 5 FAILED: No emails found after reopening");
                _output.WriteLine("  Checking debug info...");
                var debugInfo = db.GetEmailIdsIndexDebug();
                _output.WriteLine($"  email_ids_index: {debugInfo}");
            }
            else
            {
                foreach (var id in allIds)
                {
                    var email = await db.GetEmailAsync(id);
                    _output.WriteLine($"  ✓ Retrieved: {email.Subject}");
                }
                _output.WriteLine("\n✅ Layer 5 PASSED: Full integration works correctly");
            }
        }
    }

    public void Dispose()
    {
        try
        {
            if (Directory.Exists(_testDbPath))
            {
                Directory.Delete(_testDbPath, true);
            }
        }
        catch { }
    }
}